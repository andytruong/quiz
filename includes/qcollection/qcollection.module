<?php
// $Id$

/**
 * The main file for qcollection.
 *
 * A question item collection organizes quiz questions to make them easier to find
 * and to collect together for one's personal use.
 *
 * An item collection can be turned into a quiz for taking by a student.
 *
 * @file
 */

define('QCOLLECTION_NAME', 'Question item collection');


/**
 * Implementation of hook_help().
 */
function qcollection_help($path, $args) {
  if ($path == 'admin/help#qcollection') {
    return t('This module provides a question item collection type for Quiz.');
  }
}


/**
 * Implementation of hook_node_info().
 */
function qcollection_node_info() {
  return array(
    'qcollection' => array(
        'name' => t(QCOLLECTION_NAME),
        'module' => 'qcollection',
      	'description' => t('A content type for the quiz module: gathers question items into a collection, separate from quiz-taking.'),
        'has_title' => TRUE,
      	'has_body' => TRUE,
      	'body_label' => t('Notes'),
  )
  );
}


/**
 * Implementation of qcollection_menu().
 */
function qcollection_menu() {
  // Menu item for managing items in a collection
  $items['node/%qcollection_type_access/items'] = array(
  'title' => t('Manage items'),
    'page callback' => 'qcollection_questions',
    'page arguments' => array(1),
  // FIXME: This needs to check to see if the user owns the quiz.
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'qcollection.inc',
  );

  return $items;
}


/**
 * Load a qcollection node and validate it.
 *
 * @param $arg
 *  The Node ID
 * @return
 *  A qcollection node object or FALSE if a load failed.
 */
function qcollection_type_access_load($arg) {
  // Simple verification/load of the node.
  return (($node = node_load($arg)) && $node->type == 'qcollection') ? $node : FALSE;
}


/**
 * Implementation of hook_form().
 *
 */
function qcollection_form(&$node) {
  $type = node_get_types('type', $node);

  $form = array();

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#default_value' => $node->title,
  //    '#description' => t('The name of the @quiz.', array('@quiz' => QUIZ_NAME)),
    '#required' => TRUE,
  );

  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => check_plain($type->body_label),
    '#default_value' => $node->body,
  //    '#description' => t('A description of what the @quiz entails', array('@quiz' => QUIZ_NAME)),
    '#required' => FALSE,
  );

  return $form;
}





/**
 * Implementation of hook_form_alter().
 *
 * Override settings in some existing forms. For example, we remove the
 * preview button on a qcolleciton.
 */
function qcollection_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'qcollection_node_form') {
    // Remove preview buttons:
    unset($form['buttons']['preview']);
    unset($form['buttons']['preview_changes']); // TODO make preview work
  }
}

/**
 * Submit function for qcollection.
 *
 * Updates from the "manage questions" tab.
 *
 * @param $form_id
 *  A string containing the form id.
 * @param $values
 *  Array containing the form values.
 */
function qcollection_form_submit(&$form, &$form_state) {
  watchdog('info', 'Qcollection form submit start');

  print "wtf?";exit;

  // This is ugly and should be fixed.
  $quiz = node_load(arg(1));

  $new_revision = $form_state['values']['new_revision'];

  $removed = explode(',', $form_state['values']['remove_from_quiz']);
  // Get quiz questions that will always be on the quiz:
  $questions = array();
  foreach ($form_state['values']['weights'] as $id => $weight) {
    if (in_array($id, $removed)) {
      // Skip items that should be removed.
      continue;
    }
    list($state, $nid) = explode('-', $id, 2);
    $nid = (int)$nid;
    $question['nid'] = $nid;
    $question['state'] = ($state == 'always' ? QUESTION_ALWAYS : QUESTION_RANDOM);
    $question['weight'] = $weight;

    // Add item as an object in the questions array.
    $questions[] = (object)$question;
  }

  // Save questions.
  watchdog('info', 'Qcollection form submit with %quiz and %questions', array('%quiz' => $quiz, '%questions' => $questions));

  quiz_set_questions($quiz, $questions, (bool)$new_revision);
}
