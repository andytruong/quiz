<?php


// re-use code from quiz.admin.inc
module_load_include('inc', 'quiz', 'quiz.admin');


/**
 * Creates a content array listing quiz questions.
 *
 * Handles the list items tab.
 *
 * @param $qid
 *   ID of quiz to create
 * @return
 *   String containing the form.
 */
function _qcollection_list(stdClass $node) {
  // TODO replace this with a view
  $questions = _quiz_get_questions($node->nid, $node->vid);
  $table_markup = theme('qcollection_question_table', $questions, $collection_nid);
  return $table_markup;
}


/**
 * Creates a form for quiz questions.
 *
 * Handles the manage questions tab.
 *
 * @param $qid
 *   ID of quiz to create
 * @return
 *   String containing the form.
 */
function _qcollection_items($node) {
  // Add JS
  $path = drupal_get_path('module', 'quiz') . '/quiz.admin.js';
  drupal_add_js($path, 'module');

  $options['fieldset_always']['title'] = t('Items in collection');
  $options['fieldset_always']['collapsible'] = FALSE;
  $options['random_pool']['enabled'] = FALSE;

  return drupal_get_form('quiz_questions_form', $node, $options);
}


/**
 * Viewless action that copies the questions of the collection into
 * a new quiz node, then redirects the browser to editing the new quiz
 *
 * @param $collection_node
 */
function _qcollection_export_quiz($collection_node) {
  global $user;

  $quiz_node = new stdClass();
  $quiz_node->type = 'quiz';
  $quiz_node->title = t("@quiz of '@qcollection_title' by @user at @unix_time", array('@quiz' => QUIZ_NAME, '@qcollection_title' => $collection_node->title, '@user' => $user->name, '@unix_time' => time()));
  $quiz_node->teaser = $node->body = $mq->questiontext;
  $quiz_node->uid = $user->uid;
  $quiz_node->status = 0; // unpublished by default
  $quiz_node->log = "Autogenerated from item collection nid:$collection_node->nid,vid:$collection_node->vid";
  $quiz_node->pass_rate = variable_get('quiz_default_pass_rate', 75);

  // save it, giving it nid and vid
  node_save($quiz_node);

  // TODO test whether this works in PostgreSQL and in MySQL 4.1 (the minimum for D6)
  // copy all the question relationships from the collection to the new quiz
  $sql = 'INSERT INTO {quiz_node_relationship} (parent_nid, parent_vid, child_nid, child_vid, question_status, weight)
SELECT %d as parent_nid, %d AS parent_vid, child_nid, child_vid, question_status, weight FROM {quiz_node_relationship} qnr
WHERE qnr.parent_nid = %d and qnr.parent_vid = %d';

  db_query($sql, $quiz_node->nid, $quiz_node->vid, $collection_node->nid, $collection_node->vid);

  // take them to edit the quiz that was just automatically made, e.g. node/1434/edit
  $new_nid = $quiz_node->nid;
  drupal_goto('node/'. $new_nid .'/edit');
}

// TODO refactor common code with quiz edit form
function qcollection_form_submit($form, &$form_state) {
  // This is ugly and should be fixed.
  $quiz = node_load(arg(1));

  $is_new_revision = (bool) $form_state['values']['new_revision'];

  $removed = explode(',', $form_state['values']['remove_from_quiz']);

  $weight_map = $form_state['values']['weights'];

  $old_vid = $quiz->vid;

  if ($set_new_revision) {
    // Create a new Quiz VID, even if nothing changed.
    $quiz->revision = 1;
    node_save($quiz);
  }

  foreach ($weight_map as $id => $weight) {
    list($state, $nid, $vid) = explode('-', $id, 3);
    $nid = (int) $nid;
    $vid = (int) $vid;

    $sql = 'DELETE FROM {quiz_node_relationship} WHERE parent_nid = %d AND parent_vid = %d AND child_nid = %d';
    $result = db_query($sql, $quiz->nid, $old_vid, $nid);

    if (in_array($id, $removed))
    {
      continue;
    }
    else {
      $question = new stdClass;

      $question->nid = $nid;
      $question->vid = $vid;
      $question->state = ($state == 'always' ? QUESTION_ALWAYS : QUESTION_RANDOM);
      $question->weight = $weight;

      if (isset($form_state['values']['revision'][$id]) && $form_state['values']['revision'][$id] == 1) {
        $sql = "INSERT INTO {quiz_node_relationship} (parent_nid, parent_vid, child_nid, child_vid, question_status, weight)
                VALUES (%d, %d, %d, (SELECT vid FROM {node} WHERE nid = %d), %d, %d)";
        if ($question->state != QUESTION_NEVER) {
          $result = db_query($sql, $quiz->nid, $quiz->vid, $question->nid, $question->nid, $question->state, $question->weight);
        }
      }
      else {
        $sql = "INSERT INTO {quiz_node_relationship} (parent_nid, parent_vid, child_nid, child_vid, question_status, weight)
                VALUES (%d, %d, %d, %d, %d, %d)";
        if ($question->state != QUESTION_NEVER) {
          $result = db_query($sql, $quiz->nid, $quiz->vid, $question->nid,$question->vid, $question->state, $question->weight);
        }
      }
    }
  }
}

