<?php
class quizTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array (
    
    'name' => t('Import Test'),
    
    'description' => t('I love bananas more than you know'),
    
    'group' => t('Quiz'),
    );
  }
  
  
  function setUp() {
    parent::setUp('taxonomy', 'quiz', 'views', 'autoload', 'multichoice',
    'quiz_directions', 'quiz_question', 'querypath', 'questions_import');    

    // Create and log in our test user. Should be cleaned up as I something
    // was wrong with permissions and I basically kept adding potentially
    // useful ones until it worked.
     
    $user = $this->drupalCreateUser(array('administer site configuration', 'access administration pages',
    'administer quiz', 'access quiz', 'administer blocks', 'import_questions', 'create quiz',
    'administer quiz configuration', 'use PHP for block visibility', 'administer blocks',
    'create multichoice', 'edit any multichoice', 'administer taxonomy', 'allow multiple correct answers',
    'allow any number of answers'));
    $this->drupalLogin($user); 
  }
  
/**
 * Takes a quiz and checks that it is behaving properly
 *
 * @param $answers
 *   List of answer to each question
 * @param $start_node
 *   Node the quiz is located at
 */
 function quiz_tester($answers = array(), $start_node = 1) {
    $num_answers = array ();
    
    $this->drupalGet("node/{$start_node}");

    //Go through the quiz making sure answers match
    
    foreach ($answers as $answer) {
      $option = array();
      $max_answers = 0;
      
      $msg = $this->drupalGetContent();
                      
      $parse = explode('name="tries" value="', $msg);
      for ($i = 1; $i < count($parse); $i++) {
        $val = explode('"', $parse[$i]);
        $option[$i - 1] = $val[0];
      }
      
      $num_answers[] = count($option);
      if (count($option) > $max_answers) $max_answers = count($option);
      
      $this->assertTrue(($answer < count($option)), "Expected answer is actually an option");
      
      $submition['tries'] = $option[$answer];
      
      $this->drupalPost($this->getUrl(), $submition, 'Next');
    }
    
    $msg = $this->drupalGetContent();
    
    $num_questions = count($answers);
    
    $this->assertText("You got {$num_questions} of {$num_questions} possible points.", "Checking answers are correct.");
    
    //Go through the quiz, always answering A then B then C. Makes sure the
    //final score is what we'd expect given the set of answers.
    for ($i = 1; $i <= $max_answers; ++$i) {
      $correct_answers = 0;
      $this->drupalGet("node/{$start_node}");
      for ($j = 0; $j < $num_questions; ++$j) {
        $option = array();       
        $msg = $this->drupalGetContent();
        $parse = explode('name="tries" value="', $msg);
        for ($k = 1; $k < count($parse); $k++) {
          $val = explode('"', $parse[$k]);
          $option[$k - 1] = $val[0];
        }                
        $ans = $i;
                
        if (count($option) <= $ans) {
          $ans = count($option) - 1;
        }
        
        $submition['tries'] = $option[$ans];
        
        if ($answers[$j] == $ans) {
          $correct_answers++;
        }
        $this->drupalPost($this->getUrl(), $submition, 'Next');
      }
      $this->assertText("You got {$correct_answers} of {$num_questions} possible points.", "Making sure only correct answers are correct");
    }
  }
  
  // tests the Aiken input format
  function testAiken() { 
    $quiz_settings = array();
    
    $quiz_settings['title'] = "Quiz";
    $quiz_settings['body'] = "More Quiz";
    
    $msg = $this->drupalPost('node/add/quiz', $quiz_settings, 'Save');

    $import_settings['quiz_node'] = '1';
    $import_settings['question_type'] = 'multichoice';
    $import_settings['import_type'] = 'aiken';
    $import_settings['field_separator'] = ',';
    $import_settings['files[upload]'] = realpath(drupal_get_path('module', 'questions_import').'/testfiles/aiken_example.txt');
    
    $msg = $this->drupalPost('admin/quiz/questions_import', $import_settings, 'import');    
    
    $this->assertPattern('/5 questions were imported successfully/', t("Import success check"));
    
    $this->drupalGet("node/1");
    
    $this->quiz_tester(array(3, 0, 0, 1, 2));
  }

  // tests the csv input format
  function SkipptestCsv() { 
    $quiz_settings = array();
    
    $quiz_settings['title'] = "Quiz 2";
    $quiz_settings['body'] = "More Quiz";
    
    $msg = $this->drupalPost('node/add/quiz', $quiz_settings, 'Save');
    
    $import_settings['quiz_node'] = '1';
    $import_settings['question_type'] = 'multichoice';
    $import_settings['import_type'] = 'csv';
    $import_settings['field_separator'] = ',';
    $import_settings['files[upload]'] = realpath(drupal_get_path('module', 'questions_import').'/testfiles/csv_example.csv');
    
    $this->drupalPost('admin/quiz/questions_import', $import_settings, 'import');    
    
    $this->assertPattern('/6 questions were imported successfully/', t('Import success check'));
    
    $this->drupalGet("node/1");
    
    $this->quiz_tester(array(0, 2, 1, 3, 5, 7));
  }

  // would test the qti input, but qti doesn't load the questions in the order
  // listed in the input.
  function _testQti() {
    $quiz_settings = array();
    
    $quiz_settings['title'] = "Quiz 3";
    $quiz_settings['body'] = "More Quiz";
    
    $msg = $this->drupalPost('node/add/quiz', $quiz_settings, 'Save');
    
    $import_settings['quiz_node'] = '1';
    $import_settings['question_type'] = 'multichoice';
    $import_settings['import_type'] = 'qti';
    $import_settings['field_separator'] = ',';
    $import_settings['files[upload]'] = realpath(drupal_get_path('module', 'questions_import').'/testfiles/qti-sample.xml');
    
    $this->drupalPost('admin/quiz/questions_import', $import_settings, 'import');    
    
    $this->assertPattern('/\d+ questions were imported successfully/', t('Import success check'));
    
    $this->drupalGet("node/1");
        
    $this->quiz_tester(array(2, 1, 3, 2, 1, 1, 0, 2, 3, 2, 2, 0, 2, 0, 1, 0, 0, 0, 3, 1, 3, 0, 0, 0, 2, 0, 1, 2, 0, 1, 0, 0, 3, 1, 1, 3));
  }
  
}